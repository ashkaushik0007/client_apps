"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Subject_1 = require("rxjs/Subject");
var Tether = require("tether");
var GtDropdownComponent = (function () {
    function GtDropdownComponent(renderer) {
        this.renderer = renderer;
        this.selectedChange = new core_1.EventEmitter();
        this.active = false; // is dropdown active or not
        this.state = new Subject_1.Subject(); // current state of dropdown
    }
    Object.defineProperty(GtDropdownComponent.prototype, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (selection) {
            this._selected = selection;
        },
        enumerable: true,
        configurable: true
    });
    GtDropdownComponent.prototype.select = function (option) {
        this.active = false;
        this.state.next(this.active);
        if (this._selected !== option) {
            this.selectedChange.emit(option);
        }
    };
    GtDropdownComponent.prototype.toggleDropdown = function () {
        var _this = this;
        this.active = !this.active;
        setTimeout(function () { _this.state.next(_this.active); }, 0);
    };
    GtDropdownComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.state.subscribe(function (state) {
            if (state) {
                _this.tether = new Tether({
                    element: '#' + _this.id + '_menu',
                    target: '#' + _this.id,
                    attachment: 'top left',
                    targetAttachment: 'bottom left',
                    constraints: [{
                            to: 'window',
                            attachment: 'together'
                        }]
                });
                _this.tether.position();
                // set up click listener and listen for click outside dropdown
                _this.clickListener = _this.renderer.listen('document', 'click', function (event) {
                    _this.active = false;
                    _this.state.next(_this.active);
                });
                // set up keyboard listener and listen for escape key up
                _this.keyupListener = _this.renderer.listen('document', 'keyup', function (event) {
                    switch (event.key) {
                        case 'Escape':
                            _this.active = false;
                            _this.state.next(_this.active);
                            break;
                    }
                });
            }
            else {
                _this.tether.destroy();
                _this.removeListeners();
            }
        });
    };
    GtDropdownComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    GtDropdownComponent.prototype.removeListeners = function () {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.keyupListener) {
            this.keyupListener();
        }
    };
    return GtDropdownComponent;
}());
GtDropdownComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'gt-dropdown',
                template: "\n    <div class=\"dropdown gt-dropdown\" [ngClass]=\"{'show':active}\" [attr.id]=\"id\">\n      <div class=\"dropdown-toggle\" (click)=\"toggleDropdown()\" [attr.aria-expanded]=\"active\">{{selected}}</div>\n      <div class=\"gt-dropdown-menu dropdown-menu\" *ngIf=\"active\" [ngClass]=\"{'show':active}\" [attr.id]=\"id+'_menu'\">\n        <button *ngFor=\"let option of options;\" class=\"dropdown-item\" (click)=\"select(option)\" [ngClass]=\"{'active':option === selected}\">{{option}}</button>\n      </div>\n    </div>\n  ",
                styles: ["\n    .gt-dropdown .dropdown-toggle {\n      cursor: pointer;\n    }\n    .gt-dropdown .dropdown-toggle::after {\n      transition: opacity 0.4s ease-in-out;\n      opacity: 0;\n    }\n    .gt-dropdown .dropdown-toggle:hover::after {\n      opacity: 1;\n    }\n  "]
            },] },
];
/** @nocollapse */
GtDropdownComponent.ctorParameters = function () { return [
    { type: core_1.Renderer2, },
]; };
GtDropdownComponent.propDecorators = {
    'selected': [{ type: core_1.Input },],
    'options': [{ type: core_1.Input },],
    'id': [{ type: core_1.Input },],
    'selectedChange': [{ type: core_1.Output },],
};
exports.GtDropdownComponent = GtDropdownComponent;
//# sourceMappingURL=gt-dropdown.component.js.map